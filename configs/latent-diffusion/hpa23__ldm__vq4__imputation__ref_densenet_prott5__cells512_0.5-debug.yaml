model:
  base_learning_rate: 2.0e-6   # set to target_lr by starting main.py with '--scale_lr True'; doesn't need to change this when using different numbers of GPUs
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    ckpt_path: null
    linear_start: 0.0015
    linear_end: 0.0155
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    loss_type: l1
    first_stage_key: "image"
    cond_stage_key: "hybrid-conditions" # the key in the dataset for feeding into the condition model
    image_size: 64
    channels: 3
    cond_stage_trainable: true
    concat_mode: false # this will set conditioning_key to "crossattn" if not exists
    conditioning_key: hybrid # force conditioning_key to be "hybrid"
    cond_dropout: 0.1 # dropout conditions for class-conditioned model
    # scale_by_std: true
    scale_factor: 0.18215
    monitor: 'val/loss_simple_ema'
    use_ema: false

    # scheduler_config: # 10000 warmup steps
    #   target: ldm.lr_scheduler.LambdaLinearScheduler
    #   params:
    #     warm_up_steps: [10000]
    #     cycle_lengths: [10000000000000]
    #     f_start: [ 1.e-6 ]
    #     f_max: [ 1.0 ]
    #     f_min: [ 1.0 ]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 64
        in_channels: 6
        out_channels: 3
        model_channels: 192
        attention_resolutions: [ 1, 2, 4, 8 ]   # 32, 16, 8, 4
        num_res_blocks: 2
        channel_mult: [ 1, 2, 2, 4, 4 ]  # 32, 16, 8, 4, 2
        num_heads: 8
        use_scale_shift_norm: True
        resblock_updown: True
        use_spatial_transformer: True
        context_dim: 2048

    first_stage_config:
      target: ldm.models.autoencoder.VQModelInterface
      params:
        embed_dim: 3
        n_embed: 8192
        # autoencoder for the protein channel
        ckpt_path: /scratch/users/xikunz2/stable-diffusion/logs/2023-10-11T23-37-05_hpa2__autoencoder__vq4__p__cells256/checkpoints/last.ckpt
        ddconfig:
          double_z: false
          z_channels: 3
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          # - 1
          # - 2
          - 2
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
          # attn_type: none
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.data.hpa.HPAClassEmbedder
      params:
        include_location: false
        include_ref_image: true
        include_cellline: false
        use_loc_embedding: false
        image_embedding_model:
          target: ldm.models.autoencoder.VQModelInterface
          params:
            embed_dim: 3
            n_embed: 8192
            # autoencoder for the reference channels
            ckpt_path: /scratch/users/xikunz2/stable-diffusion/logs/2023-10-12T20-32-07_hpa2__autoencoder__vq4__r__cells256/checkpoints/last.ckpt
            ddconfig:
              double_z: false
              z_channels: 3
              resolution: 256
              in_channels: 3
              out_ch: 3
              ch: 128
              ch_mult:
              - 1
              # - 1
              # - 2
              - 2
              - 4
              num_res_blocks: 2
              attn_resolutions: []
              dropout: 0.0
              # attn_type: none
            lossconfig:
              target: torch.nn.Identity

data:
  target: ldm.data.base.DataModuleFromConfig
  params:
    batch_size: 8 # We can use a maximum batch size of 8 on a single GPU; doesn't need to change this when using different numbers of GPUs
    num_workers: 0 # Number of dataloader subprocesses per GPU process (if using DDP); set it to 1 or 2 in this case
    wrap: False
    use_worker_init_fn: true
    shuffle_val_dataloader: true
    train:
      target: ldm.data.hpa23.HPA
      params:
        group: 'train'
        include_densenet_embedding: all
        include_seq_embedding: prott5-swissprot
        channels: [1, 1, 1]
        rotate_and_flip: false
        include_location: false
        crop_size: 512
        crop_type: cells
        scale_factor: 0.5
        return_info: false
    validation:
      target: ldm.data.hpa23.HPA
      params:
        group: 'validation'
        include_densenet_embedding: all
        include_seq_embedding: prott5-swissprot
        channels: [1, 1, 1]
        include_location: false
        crop_size: 512
        crop_type: cells
        scale_factor: 0.5
        return_info: false
lightning:
  callbacks:
    image_logger:
      target: ldm.callbacks.ImageLogger
      params:
        batch_frequency: 1000
        log_validation: true
        val_batch_frequency: 1000
        monitor_val_metric: "val/loss_simple_ema"
        max_images: 8
        increase_log_steps: false
        log_to_slack: []
        log_first_step: true
        log_on_batch_idx: true
        log_images_kwargs:
          ddim_steps: 100
          quantize_denoised: false
          inpaint: false
          unconditional_guidance_scale: 2.0
          plot_denoise_rows: false
          plot_progressive_rows: false
          plot_diffusion_rows: false
          plot_inputs: false
          plot_reconstructions: false
          mix_sample: false
          n_row: 8

  trainer:
    benchmark: True
    # accelerator: dp # need to change to dp because the default ddp will free the training
    limit_train_batches: 4000
    limit_val_batches: 200
    # limit_train_batches: 10
    # limit_val_batches: 10
    val_check_interval: 1.0